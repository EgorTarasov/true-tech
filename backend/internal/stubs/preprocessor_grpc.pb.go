// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextProcessingServiceClient is the client API for TextProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextProcessingServiceClient interface {
	ProcessText(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (*ProcessingResponse, error)
}

type textProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextProcessingServiceClient(cc grpc.ClientConnInterface) TextProcessingServiceClient {
	return &textProcessingServiceClient{cc}
}

func (c *textProcessingServiceClient) ProcessText(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (*ProcessingResponse, error) {
	out := new(ProcessingResponse)
	err := c.cc.Invoke(ctx, "/TextProcessingService/ProcessText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextProcessingServiceServer is the server API for TextProcessingService service.
// All implementations must embed UnimplementedTextProcessingServiceServer
// for forward compatibility
type TextProcessingServiceServer interface {
	ProcessText(context.Context, *ProcessingRequest) (*ProcessingResponse, error)
	mustEmbedUnimplementedTextProcessingServiceServer()
}

// UnimplementedTextProcessingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTextProcessingServiceServer struct {
}

func (UnimplementedTextProcessingServiceServer) ProcessText(context.Context, *ProcessingRequest) (*ProcessingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessText not implemented")
}
func (UnimplementedTextProcessingServiceServer) mustEmbedUnimplementedTextProcessingServiceServer() {}

// UnsafeTextProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextProcessingServiceServer will
// result in compilation errors.
type UnsafeTextProcessingServiceServer interface {
	mustEmbedUnimplementedTextProcessingServiceServer()
}

func RegisterTextProcessingServiceServer(s grpc.ServiceRegistrar, srv TextProcessingServiceServer) {
	s.RegisterService(&TextProcessingService_ServiceDesc, srv)
}

func _TextProcessingService_ProcessText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessingServiceServer).ProcessText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TextProcessingService/ProcessText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessingServiceServer).ProcessText(ctx, req.(*ProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextProcessingService_ServiceDesc is the grpc.ServiceDesc for TextProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TextProcessingService",
	HandlerType: (*TextProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessText",
			Handler:    _TextProcessingService_ProcessText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "preprocessor.proto",
}
